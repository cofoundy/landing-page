---
import { routes } from "../utils/routes";

const menuItems = [
  { text: "Servicios", href: routes.services },
  { text: "Proyectos", href: routes.projects },
  { text: "Proceso", href: routes.process },
  { text: "Contacto", href: routes.contact },
];
---

<header class="fixed w-full z-50 top-0 left-0">
  <div class="container mx-auto px-4">
    <div
      class="flex h-20 items-center justify-between bg-white/80 backdrop-blur-lg rounded-2xl mt-4 px-6 border border-secondary/10"
    >
      <a
        href={routes.home}
        class="text-2xl font-bold text-secondary flex items-center gap-2 relative z-50 hover:text-primary transition-colors duration-300"
      >
        <img src="/icon.svg" alt="Cofoundy Logo" class="w-8 h-8" />
        Cofoundy
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex items-center space-x-8">
        {
          menuItems.map((item) => (
            <a
              href={item.href}
              class="text-secondary/80 hover:text-secondary transition-all duration-300"
            >
              {item.text}
            </a>
          ))
        }
        <a
          href={routes.contact}
          class="inline-flex items-center px-6 py-3 bg-primary hover:bg-primary-dark text-white font-medium rounded-xl transition-all duration-300 transform hover:scale-105"
        >
          Iniciar Proyecto
        </a>
      </nav>

      <!-- Mobile Menu Button -->
      <button
        id="menuButton"
        class="relative z-[60] w-12 h-12 flex items-center justify-center rounded-xl bg-secondary/5 hover:bg-secondary/10 transition-colors duration-300 md:hidden"
        aria-label="Toggle Menu"
      >
        <div
          class="flex flex-col items-center justify-center w-6 h-6 overflow-visible"
        >
          <span
            class="w-6 h-0.5 bg-secondary rounded-full transition-all duration-300 transform"
          ></span>
          <span
            class="w-6 h-0.5 bg-secondary rounded-full my-1.5 transition-all duration-300 transform"
          ></span>
          <span
            class="w-6 h-0.5 bg-secondary rounded-full transition-all duration-300 transform"
          ></span>
        </div>
      </button>

      <!-- Mobile Menu Overlay -->
      <div
        id="mobileMenu"
        class="fixed inset-0 z-50 opacity-0 pointer-events-none transition-all duration-300 md:hidden"
      >
        <!-- Menu Content -->
        <div
          class="absolute right-4 top-24 w-[calc(100%-2rem)] max-w-md bg-white/80 backdrop-blur-xl shadow-xl rounded-2xl border border-secondary/10 transform translate-y-[-1rem] transition-all duration-300"
        >
          <nav class="flex flex-col py-4">
            {
              menuItems.map((item) => (
                <a
                  href={item.href}
                  class="px-6 py-3 text-lg font-medium text-secondary/80 hover:text-secondary hover:bg-secondary/5 transition-all duration-300"
                >
                  {item.text}
                </a>
              ))
            }
            <div class="px-6 pt-3">
              <a
                href={routes.contact}
                class="inline-flex w-full items-center justify-center px-6 py-3 bg-primary hover:bg-primary-dark text-white font-medium rounded-xl transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98]"
              >
                Iniciar Proyecto
              </a>
            </div>
          </nav>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  const menuButton = document.getElementById("menuButton");
  const mobileMenu = document.getElementById("mobileMenu");
  const menuContent = mobileMenu?.querySelector("div") as HTMLElement;
  const spans = menuButton?.querySelectorAll("span");
  let isOpen = false;

  menuButton?.addEventListener("click", () => {
    isOpen = !isOpen;

    if (mobileMenu instanceof HTMLElement) {
      // Toggle menu visibility
      mobileMenu.style.opacity = isOpen ? "1" : "0";
      mobileMenu.style.pointerEvents = isOpen ? "auto" : "none";

      if (menuContent) {
        menuContent.style.transform = isOpen
          ? "translate(0, 0)"
          : "translate(0, -1rem)";
      }
    }

    // Animate hamburger to X
    if (spans && spans.length === 3) {
      if (isOpen) {
        spans[0].style.transform = "rotate(45deg) translate(6px, 6px)";
        spans[1].style.opacity = "0";
        spans[2].style.transform = "rotate(-45deg) translate(6px, -6px)";
      } else {
        spans[0].style.transform = "none";
        spans[1].style.opacity = "1";
        spans[2].style.transform = "none";
      }
    }
  });

  // Close menu when clicking a link
  const menuLinks = mobileMenu?.querySelectorAll("a");
  menuLinks?.forEach((link) => {
    link.addEventListener("click", () => {
      isOpen = false;
      if (mobileMenu instanceof HTMLElement) {
        mobileMenu.style.opacity = "0";
        mobileMenu.style.pointerEvents = "none";
      }
      if (menuContent) {
        menuContent.style.transform = "translate(0, -1rem)";
      }
      if (spans && spans.length === 3) {
        spans[0].style.transform = "none";
        spans[1].style.opacity = "1";
        spans[2].style.transform = "none";
      }
    });
  });
</script>

<style>
  /* Prevent body scroll when menu is open */
  body.menu-open {
    overflow: hidden;
  }
</style>
