---
const servicesRow1 = [
  {
    title: "SOFTWARE A MEDIDA",
    description: "Sistemas personalizados para tu empresa",
    icon: "üíª",
    accent: "from-[#46A0D0] to-[#1B577E]"
  },
  // {
  //   title: "BUSINESS INTELLIGENCE",
  //   description: "Dashboards y an√°lisis de datos",
  //   icon: "üìä",
  //   accent: "from-[#1B577E] to-[#23435F]"
  // },
  {
    title: "CONSULTOR√çA TI",
    description: "Transformaci√≥n digital empresarial",
    icon: "üîß",
    accent: "from-[#23435F] to-[#46A0D0]"
  },
  {
    title: "DESARROLLO DE MVP",
    description: "Prototipos r√°pidos para startups",
    icon: "üöÄ",
    accent: "from-[#46A0D0] to-[#23435F]"
  },
  {
    title: "DESARROLLO WEB",
    description: "Aplicaciones web modernas",
    icon: "üåê",
    accent: "from-[#46A0D0] to-[#23435F]"
  }
];

const servicesRow2 = [
  {
    title: "APPS M√ìVILES",
    description: "Desarrollo iOS y Android",
    icon: "üì±",
    accent: "from-[#1B577E] to-[#46A0D0]"
  },
  {
    title: "MACHINE LEARNING",
    description: "IA y modelos predictivos",
    icon: "ü§ñ",
    accent: "from-[#23435F] to-[#1B577E]"
  },
  {
    title: "SOLUCIONES DE DATOS EN TIEMPO REAL",
    description: "Procesamiento y an√°lisis de datos en tiempo real",
    icon: "‚è±Ô∏è",
    accent: "from-[#1B577E] to-[#46A0D0]"
  },
  {
    title: "CLOUD & DEVOPS",
    description: "Infraestructura y automatizaci√≥n",
    icon: "‚òÅÔ∏è",
    accent: "from-[#46A0D0] to-[#1B577E]"
  },
];
---

<section id="services" class="relative bg-dark min-h-screen flex flex-col pt-20 md:pt-32 pb-16 md:pb-24 overflow-hidden">
  <!-- Animated mesh background -->
  <div class="absolute inset-0 bg-[linear-gradient(rgba(70,160,208,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(70,160,208,0.03)_1px,transparent_1px)] bg-[size:32px_32px] md:bg-[size:40px_40px] [mask-image:radial-gradient(ellipse_80%_50%_at_50%_0%,#000_70%,transparent_110%)]"></div>

  <!-- Title with animated underline -->
  <div class="container relative mx-auto px-4 mb-8 md:mb-20">
    <div class="relative inline-block left-1/2 -translate-x-1/2">
      <h2 class="text-3xl sm:text-4xl md:text-5xl font-bold text-white text-center tracking-wide">
        NUESTROS SERVICIOS
      </h2>
      <div class="absolute -bottom-3 md:-bottom-4 left-0 w-full h-1 bg-gradient-to-r from-transparent via-primary to-transparent"></div>
    </div>
  </div>

  <!-- Services Auto-scroll Rows -->
  <div class="flex-1 relative space-y-8">
    <!-- First Row - Left to Right -->
    <div class="relative max-w-[1500px] mx-auto">
      <!-- Fade Edges -->
      <div class="absolute inset-y-0 left-0 w-32 bg-gradient-to-r from-dark to-transparent z-10"></div>
      <div class="absolute inset-y-0 right-0 w-32 bg-gradient-to-l from-dark to-transparent z-10"></div>

      <div id="servicesRow1" class="flex gap-4 py-4 overflow-hidden">
        <div class="flex animate-scroll-right gap-4">
          {[...servicesRow1, ...servicesRow1, ...servicesRow1].map((service) => (
            <a 
              href="#contact"
              class="group relative w-[260px] sm:w-[280px] flex-shrink-0 h-[200px] bg-white/[0.03] backdrop-blur-sm rounded-xl border border-white/10 p-6 hover:-translate-y-1 transition-all duration-300"
            >
              <div class={`absolute inset-0 bg-gradient-to-br ${service.accent} opacity-0 group-hover:opacity-10 rounded-xl transition-opacity duration-300`}></div>
              
              <div class="relative flex flex-col h-full">
                <!-- Icon -->
                <div class="text-3xl group-hover:scale-110 transition-transform duration-300">{service.icon}</div>
                
                <!-- Content -->
                <div class="mt-4">
                  <h3 class="text-sm font-bold text-white mb-2 group-hover:text-primary transition-colors duration-300">
                    {service.title}
                  </h3>
                  <p class="text-sm text-white/70 group-hover:text-white/90 transition-colors duration-300">
                    {service.description}
                  </p>
                </div>

                <!-- Arrow indicator -->
                <div class="mt-auto ml-auto opacity-0 transform translate-x-4 group-hover:opacity-100 group-hover:translate-x-0 transition-all duration-300">
                  <svg class="w-4 h-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                  </svg>
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    </div>

    <!-- Second Row - Right to Left -->
    <div class="relative max-w-[1500px] mx-auto">
      <!-- Fade Edges -->
      <div class="absolute inset-y-0 left-0 w-32 bg-gradient-to-r from-dark to-transparent z-10"></div>
      <div class="absolute inset-y-0 right-0 w-32 bg-gradient-to-l from-dark to-transparent z-10"></div>

      <div id="servicesRow2" class="flex gap-4 py-4 overflow-hidden">
        <div class="flex animate-scroll-left gap-4">
          {[...servicesRow2, ...servicesRow2, ...servicesRow2].map((service) => (
            <a 
              href="#contact"
              class="group relative w-[260px] sm:w-[280px] flex-shrink-0 h-[200px] bg-white/[0.03] backdrop-blur-sm rounded-xl border border-white/10 p-6 hover:-translate-y-1 transition-all duration-300"
            >
              <div class={`absolute inset-0 bg-gradient-to-br ${service.accent} opacity-0 group-hover:opacity-10 rounded-xl transition-opacity duration-300`}></div>
              
              <div class="relative flex flex-col h-full">
                <!-- Icon -->
                <div class="text-3xl group-hover:scale-110 transition-transform duration-300">{service.icon}</div>
                
                <!-- Content -->
                <div class="mt-4">
                  <h3 class="text-sm font-bold text-white mb-2 group-hover:text-primary transition-colors duration-300">
                    {service.title}
                  </h3>
                  <p class="text-sm text-white/70 group-hover:text-white/90 transition-colors duration-300">
                    {service.description}
                  </p>
                </div>

                <!-- Arrow indicator -->
                <div class="mt-auto ml-auto opacity-0 transform translate-x-4 group-hover:opacity-100 group-hover:translate-x-0 transition-all duration-300">
                  <svg class="w-4 h-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                  </svg>
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    </div>
  </div>

  <!-- Call to action -->
  <div class="container relative mx-auto px-4 mt-8 md:mt-16">
    <div class="flex justify-center">
      <a 
        href="#contact"
        class="inline-flex items-center px-6 sm:px-8 py-3 sm:py-4 bg-primary hover:bg-primary-dark text-white font-medium rounded-xl transition-all duration-300 transform hover:scale-105 active:scale-95 hover:shadow-lg text-base sm:text-lg"
      >
        Iniciar Proyecto
        <svg class="ml-2 w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>
    </div>
  </div>
</section>

<script>
  const servicesRow1 = document.getElementById('servicesRow1');
  const servicesRow2 = document.getElementById('servicesRow2');
  
  let touchStartX = 0;
  let scrollLeft = 0;

  function handleTouchStart(e: TouchEvent) {
    const row = e.currentTarget as HTMLElement;
    touchStartX = e.touches[0].pageX;
    scrollLeft = row.scrollLeft;
    
    // Pause animation while touching
    const scrollingContent = row.querySelector('div') as HTMLElement;
    if (scrollingContent) {
      scrollingContent.style.animationPlayState = 'paused';
    }
  }

  function handleTouchMove(e: TouchEvent) {
    if (!touchStartX) return;
    
    const row = e.currentTarget as HTMLElement;
    const touchCurrentX = e.touches[0].pageX;
    const diff = touchStartX - touchCurrentX;
    row.scrollLeft = scrollLeft + diff;
    
    // Prevent page scrolling while touching the rows
    e.preventDefault();
  }

  function handleTouchEnd(e: TouchEvent) {
    const row = e.currentTarget as HTMLElement;
    touchStartX = 0;
    
    // Resume animation after touch
    const scrollingContent = row.querySelector('div') as HTMLElement;
    if (scrollingContent) {
      scrollingContent.style.animationPlayState = 'running';
    }
  }

  // Add touch events to both rows
  [servicesRow1, servicesRow2].forEach(row => {
    if (row) {
      row.addEventListener('touchstart', handleTouchStart, { passive: false });
      row.addEventListener('touchmove', handleTouchMove, { passive: false });
      row.addEventListener('touchend', handleTouchEnd, { passive: false });
    }
  });
</script>

<style>
  @keyframes scroll-right {
    from {
      transform: translateX(calc(-33.33% - 1rem));
    }
    to {
      transform: translateX(calc(-66.66% - 1rem));
    }
  }

  @keyframes scroll-left {
    from {
      transform: translateX(calc(-66.66% - 1rem));
    }
    to {
      transform: translateX(calc(-33.33% - 1rem));
    }
  }

  .animate-scroll-right {
    animation: scroll-right 30s linear infinite;
  }

  .animate-scroll-left {
    animation: scroll-left 30s linear infinite;
  }

  /* Pause animation on hover */
  #servicesRow1:hover .animate-scroll-right,
  #servicesRow2:hover .animate-scroll-left {
    animation-play-state: paused;
  }

  /* Optimize animations for reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .animate-scroll-right,
    .animate-scroll-left {
      animation: none;
    }
  }

  /* Enable smooth scrolling for touch */
  #servicesRow1,
  #servicesRow2 {
    -webkit-overflow-scrolling: touch;
    scroll-behavior: smooth;
  }
</style>
